2014-12-24 20:45:10 -0500 | INFO: 
TypeObjectTests
  TypeObject assignment
    Loads prototype and base type data if it exists for all monster types, or just base type if it does not have a prototype
    Raises an exception if the monster type does not exist
    Gets a prototype name if it exists, and returns "none" if it does not
    Gives detailed exception information for MonsterNotFound
  TypeObject Marshal and Deep Clone Tests
    Loads all monster prototypes into memory, clones them, and verifies that their object_id's are different
    Loads all monster prototypes into memory, deep clones them(marshal/unmarshal), and verifies that their prototype object_id's are different
    Demonstrates that a shallow clone is not sufficient for prototyping by showing that the object id's for clones are different, but the underlying prototype id's are the same
    Demonstrates a better clone method (on the monster class) by showing that all object id's are different
    Raises an UnsupportedType exception if something other than a String or MonsterType is passed to Monster.new
    Create n number of orcs using threads and demonstrates the ruby threadwall
    Take longer than n / (n * 0.1) seconds to marshal and then unmarshal objects
    Completes n number of efficient clones in less time than the total marshalling time(previous test)
  TypeObject Thread Pool Cloning
    Clones objects much faster using threads (total_marshal_time / (num_cpus / 2))

Finished in 25.99 seconds (files took 0.11272 seconds to load)
13 examples, 0 failures

2014-12-24 21:56:04 -0500 | INFO: 
TypeObjectTests
  TypeObject assignment
    Loads prototype and base type data if it exists for all monster types, or just base type if it does not have a prototype
    Raises an exception if the monster type does not exist
    Gets a prototype name if it exists, and returns "none" if it does not
    Gives detailed exception information for MonsterNotFound
  TypeObject Marshal and Deep Clone Tests
    Loads all monster prototypes into memory, clones them, and verifies that their object_id's are different
    Loads all monster prototypes into memory, deep clones them(marshal/unmarshal), and verifies that their prototype object_id's are different
    Demonstrates that a shallow clone is not sufficient for prototyping by showing that the object id's for clones are different, but the underlying prototype id's are the same
    Demonstrates a better clone method (on the monster class) by showing that all object id's are different
    Raises an UnsupportedType exception if something other than a String or MonsterType is passed to Monster.new
    Create n number of orcs using threads and demonstrates the ruby threadwall
    Take longer than n / (n * 0.1) seconds to marshal and then unmarshal objects
    Completes n number of efficient clones in less time than the total marshalling time(previous test)
  TypeObject Thread Pool Cloning
    Clones objects much faster using threads (total_marshal_time / (num_cpus / 2))

Finished in 25.22 seconds (files took 0.11549 seconds to load)
13 examples, 0 failures

2014-12-27 06:03:13 -0500 | INFO: 
TypeObjectTests
  TypeObject assignment
    Loads prototype and base type data if it exists for all monster types, or just base type if it does not have a prototype
    Raises an exception if the monster type does not exist
    Gets a prototype name if it exists, and returns "none" if it does not
    Gives detailed exception information for MonsterNotFound
  TypeObject Marshal and Deep Clone Tests
    Loads all monster prototypes into memory, clones them, and verifies that their object_id's are different
    Loads all monster prototypes into memory, deep clones them(marshal/unmarshal), and verifies that their prototype object_id's are different
    Demonstrates that a shallow clone is not sufficient for prototyping by showing that the object id's for clones are different, but the underlying prototype id's are the same
    Demonstrates a better clone method (on the monster class) by showing that all object id's are different
    Raises an UnsupportedType exception if something other than a String or MonsterType is passed to Monster.new
    Create n number of orcs using threads and demonstrates the ruby threadwall
    Take longer than n / (n * 0.1) seconds to marshal and then unmarshal objects
    Completes n number of efficient clones in less time than the total marshalling time(previous test)
  TypeObject Thread Pool Cloning
    Clones objects much faster using threads (total_marshal_time / (num_cpus / 2))

Finished in 25.91 seconds (files took 0.11431 seconds to load)
13 examples, 0 failures

2014-12-27 07:16:46 -0500 | INFO: 
TypeObjectTests
  TypeObject assignment
    Loads prototype and base type data if it exists for all monster types, or just base type if it does not have a prototype
    Raises an exception if the monster type does not exist
    Gets a prototype name if it exists, and returns "none" if it does not
    Gives detailed exception information for MonsterNotFound
  TypeObject Marshal and Deep Clone Tests
    Loads all monster prototypes into memory, clones them, and verifies that their object_id's are different
    Loads all monster prototypes into memory, deep clones them(marshal/unmarshal), and verifies that their prototype object_id's are different
    Demonstrates that a shallow clone is not sufficient for prototyping by showing that the object id's for clones are different, but the underlying prototype id's are the same
    Demonstrates a better clone method (on the monster class) by showing that all object id's are different
    Raises an UnsupportedType exception if something other than a String or MonsterType is passed to Monster.new
    Create n number of orcs using threads and demonstrates the ruby threadwall
    Take longer than n / (n * 0.1) seconds to marshal and then unmarshal objects
    Completes n number of efficient clones in less time than the total marshalling time(previous test)
  TypeObject Thread Pool Cloning
    Clones objects much faster using threads (total_marshal_time / (num_cpus / 2))

Finished in 26.78 seconds (files took 0.12383 seconds to load)
13 examples, 0 failures

2014-12-29 02:36:46 -0500 | INFO: 
TypeObjectTests
  TypeObject assignment
    Loads prototype and base type data if it exists for all monster types, or just base type if it does not have a prototype
    Raises an exception if the monster type does not exist
    Gets a prototype name if it exists, and returns "none" if it does not
    Gives detailed exception information for MonsterNotFound
  TypeObject Marshal and Deep Clone Tests
    Loads all monster prototypes into memory, clones them, and verifies that their object_id's are different
    Loads all monster prototypes into memory, deep clones them(marshal/unmarshal), and verifies that their prototype object_id's are different
    Demonstrates that a shallow clone is not sufficient for prototyping by showing that the object id's for clones are different, but the underlying prototype id's are the same
    Demonstrates a better clone method (on the monster class) by showing that all object id's are different
    Raises an UnsupportedType exception if something other than a String or MonsterType is passed to Monster.new
    Create n number of orcs using threads and demonstrates the ruby threadwall
    Take longer than n / (n * 0.1) seconds to marshal and then unmarshal objects
    Completes n number of efficient clones in less time than the total marshalling time(previous test)
  TypeObject Thread Pool Cloning
    Clones objects much faster using threads (total_marshal_time / (num_cpus / 2))

Finished in 25.07 seconds (files took 0.11879 seconds to load)
13 examples, 0 failures

2014-12-29 02:38:35 -0500 | INFO: 
TypeObjectTests
  TypeObject assignment
    Loads prototype and base type data if it exists for all monster types, or just base type if it does not have a prototype
    Raises an exception if the monster type does not exist
    Gets a prototype name if it exists, and returns "none" if it does not
    Gives detailed exception information for MonsterNotFound
  TypeObject Marshal and Deep Clone Tests
    Loads all monster prototypes into memory, clones them, and verifies that their object_id's are different
    Loads all monster prototypes into memory, deep clones them(marshal/unmarshal), and verifies that their prototype object_id's are different
    Demonstrates that a shallow clone is not sufficient for prototyping by showing that the object id's for clones are different, but the underlying prototype id's are the same
    Demonstrates a better clone method (on the monster class) by showing that all object id's are different
    Raises an UnsupportedType exception if something other than a String or MonsterType is passed to Monster.new
    Create n number of orcs using threads and demonstrates the ruby threadwall
    Take longer than n / (n * 0.1) seconds to marshal and then unmarshal objects
    Completes n number of efficient clones in less time than the total marshalling time(previous test)
  TypeObject Thread Pool Cloning
    Clones objects much faster using threads (total_marshal_time / (num_cpus / 2))

Finished in 25.24 seconds (files took 0.12107 seconds to load)
13 examples, 0 failures

2014-12-29 02:39:39 -0500 | INFO: 
TypeObjectTests
  TypeObject assignment
    Loads prototype and base type data if it exists for all monster types, or just base type if it does not have a prototype
    Raises an exception if the monster type does not exist
    Gets a prototype name if it exists, and returns "none" if it does not
    Gives detailed exception information for MonsterNotFound
  TypeObject Marshal and Deep Clone Tests
    Loads all monster prototypes into memory, clones them, and verifies that their object_id's are different
    Loads all monster prototypes into memory, deep clones them(marshal/unmarshal), and verifies that their prototype object_id's are different
    Demonstrates that a shallow clone is not sufficient for prototyping by showing that the object id's for clones are different, but the underlying prototype id's are the same
    Demonstrates a better clone method (on the monster class) by showing that all object id's are different
    Raises an UnsupportedType exception if something other than a String or MonsterType is passed to Monster.new

2014-12-29 02:40:30 -0500 | INFO: 
TypeObjectTests
  TypeObject assignment
    Loads prototype and base type data if it exists for all monster types, or just base type if it does not have a prototype
    Raises an exception if the monster type does not exist
    Gets a prototype name if it exists, and returns "none" if it does not
    Gives detailed exception information for MonsterNotFound
  TypeObject Marshal and Deep Clone Tests
    Loads all monster prototypes into memory, clones them, and verifies that their object_id's are different
    Loads all monster prototypes into memory, deep clones them(marshal/unmarshal), and verifies that their prototype object_id's are different
    Demonstrates that a shallow clone is not sufficient for prototyping by showing that the object id's for clones are different, but the underlying prototype id's are the same
    Demonstrates a better clone method (on the monster class) by showing that all object id's are different
    Raises an UnsupportedType exception if something other than a String or MonsterType is passed to Monster.new
    Create n number of orcs using threads and demonstrates the ruby threadwall
    Take longer than n / (n * 0.1) seconds to marshal and then unmarshal objects
    Completes n number of efficient clones in less time than the total marshalling time(previous test)
  TypeObject Thread Pool Cloning
    Clones objects much faster using threads (total_marshal_time / (num_cpus / 2))

Finished in 25.71 seconds (files took 0.12933 seconds to load)
13 examples, 0 failures

2014-12-29 02:43:22 -0500 | INFO: 
TypeObjectTests
  TypeObject assignment
    Loads prototype and base type data if it exists for all monster types, or just base type if it does not have a prototype
    Raises an exception if the monster type does not exist
    Gets a prototype name if it exists, and returns "none" if it does not
    Gives detailed exception information for MonsterNotFound
  TypeObject Marshal and Deep Clone Tests
    Loads all monster prototypes into memory, clones them, and verifies that their object_id's are different
    Loads all monster prototypes into memory, deep clones them(marshal/unmarshal), and verifies that their prototype object_id's are different
    Demonstrates that a shallow clone is not sufficient for prototyping by showing that the object id's for clones are different, but the underlying prototype id's are the same
    Demonstrates a better clone method (on the monster class) by showing that all object id's are different
    Raises an UnsupportedType exception if something other than a String or MonsterType is passed to Monster.new
    Create n number of orcs using threads and demonstrates the ruby threadwall
    Take longer than n / (n * 0.1) seconds to marshal and then unmarshal objects
    Completes n number of efficient clones in less time than the total marshalling time(previous test)
  TypeObject Thread Pool Cloning
    Clones objects much faster using threads (total_marshal_time / (num_cpus / 2))

Finished in 25.45 seconds (files took 0.12756 seconds to load)
13 examples, 0 failures

2014-12-29 02:44:45 -0500 | INFO: 
TypeObjectTests
  TypeObject assignment
    Loads prototype and base type data if it exists for all monster types, or just base type if it does not have a prototype
    Raises an exception if the monster type does not exist
    Gets a prototype name if it exists, and returns "none" if it does not
    Gives detailed exception information for MonsterNotFound
  TypeObject Marshal and Deep Clone Tests
    Loads all monster prototypes into memory, clones them, and verifies that their object_id's are different
    Loads all monster prototypes into memory, deep clones them(marshal/unmarshal), and verifies that their prototype object_id's are different
    Demonstrates that a shallow clone is not sufficient for prototyping by showing that the object id's for clones are different, but the underlying prototype id's are the same
    Demonstrates a better clone method (on the monster class) by showing that all object id's are different
    Raises an UnsupportedType exception if something other than a String or MonsterType is passed to Monster.new
    Create n number of orcs using threads and demonstrates the ruby threadwall
    Take longer than n / (n * 0.1) seconds to marshal and then unmarshal objects
    Completes n number of efficient clones in less time than the total marshalling time(previous test)
  TypeObject Thread Pool Cloning
    Clones objects much faster using threads (total_marshal_time / (num_cpus / 2))

Finished in 25.9 seconds (files took 0.12614 seconds to load)
13 examples, 0 failures

2014-12-29 20:03:57 -0500 | INFO: 
TypeObjectTests
  TypeObject assignment
    Loads prototype and base type data if it exists for all monster types, or just base type if it does not have a prototype
    Raises an exception if the monster type does not exist
    Gets a prototype name if it exists, and returns "none" if it does not
    Gives detailed exception information for MonsterNotFound
  TypeObject Marshal and Deep Clone Tests
    Loads all monster prototypes into memory, clones them, and verifies that their object_id's are different
    Loads all monster prototypes into memory, deep clones them(marshal/unmarshal), and verifies that their prototype object_id's are different
    Demonstrates that a shallow clone is not sufficient for prototyping by showing that the object id's for clones are different, but the underlying prototype id's are the same
    Demonstrates a better clone method (on the monster class) by showing that all object id's are different
    Raises an UnsupportedType exception if something other than a String or MonsterType is passed to Monster.new
    Create n number of orcs using threads and demonstrates the ruby threadwall
    Take longer than n / (n * 0.1) seconds to marshal and then unmarshal objects
    Completes n number of efficient clones in less time than the total marshalling time(previous test)
  TypeObject Thread Pool Cloning
    Clones objects much faster using threads (total_marshal_time / (num_cpus / 2))

Finished in 27.04 seconds (files took 0.12147 seconds to load)
13 examples, 0 failures

2014-12-29 20:13:16 -0500 | INFO: 
TypeObjectTests
  TypeObject assignment
    Loads prototype and base type data if it exists for all monster types, or just base type if it does not have a prototype
    Raises an exception if the monster type does not exist
    Gets a prototype name if it exists, and returns "none" if it does not
    Gives detailed exception information for MonsterNotFound
  TypeObject Marshal and Deep Clone Tests
    Loads all monster prototypes into memory, clones them, and verifies that their object_id's are different
    Loads all monster prototypes into memory, deep clones them(marshal/unmarshal), and verifies that their prototype object_id's are different
    Demonstrates that a shallow clone is not sufficient for prototyping by showing that the object id's for clones are different, but the underlying prototype id's are the same
    Demonstrates a better clone method (on the monster class) by showing that all object id's are different
    Raises an UnsupportedType exception if something other than a String or MonsterType is passed to Monster.new
    Create n number of orcs using threads and demonstrates the ruby threadwall
    Take longer than n / (n * 0.1) seconds to marshal and then unmarshal objects
    Completes n number of efficient clones in less time than the total marshalling time(previous test)
  TypeObject Thread Pool Cloning
    Clones objects much faster using threads (total_marshal_time / (num_cpus / 2))

Finished in 26.02 seconds (files took 0.12532 seconds to load)
13 examples, 0 failures

2014-12-30 17:30:55 -0500 | INFO: 
TypeObjectTests
  TypeObject assignment
    Loads prototype and base type data if it exists for all monster types, or just base type if it does not have a prototype
    Raises an exception if the monster type does not exist
    Gets a prototype name if it exists, and returns "none" if it does not
    Gives detailed exception information for MonsterNotFound
  TypeObject Marshal and Deep Clone Tests
    Loads all monster prototypes into memory, clones them, and verifies that their object_id's are different
    Loads all monster prototypes into memory, deep clones them(marshal/unmarshal), and verifies that their prototype object_id's are different
    Demonstrates that a shallow clone is not sufficient for prototyping by showing that the object id's for clones are different, but the underlying prototype id's are the same
    Demonstrates a better clone method (on the monster class) by showing that all object id's are different
    Raises an UnsupportedType exception if something other than a String or MonsterType is passed to Monster.new
    Create n number of orcs using threads and demonstrates the ruby threadwall
    Take longer than n / (n * 0.1) seconds to marshal and then unmarshal objects
    Completes n number of efficient clones in less time than the total marshalling time(previous test)
  TypeObject Thread Pool Cloning
    Clones objects much faster using threads (total_marshal_time / (num_cpus / 2))

Finished in 26.22 seconds (files took 0.12663 seconds to load)
13 examples, 0 failures

2014-12-30 18:13:17 -0500 | INFO: 
TypeObjectTests
  TypeObject assignment
    Loads prototype and base type data if it exists for all monster types, or just base type if it does not have a prototype
    Raises an exception if the monster type does not exist
    Gets a prototype name if it exists, and returns "none" if it does not
    Gives detailed exception information for MonsterNotFound
  TypeObject Marshal and Deep Clone Tests
    Loads all monster prototypes into memory, clones them, and verifies that their object_id's are different
    Loads all monster prototypes into memory, deep clones them(marshal/unmarshal), and verifies that their prototype object_id's are different
    Demonstrates that a shallow clone is not sufficient for prototyping by showing that the object id's for clones are different, but the underlying prototype id's are the same
    Demonstrates a better clone method (on the monster class) by showing that all object id's are different
    Raises an UnsupportedType exception if something other than a String or MonsterType is passed to Monster.new
    Create n number of orcs using threads and demonstrates the ruby threadwall
    Take longer than n / (n * 0.1) seconds to marshal and then unmarshal objects
    Completes n number of efficient clones in less time than the total marshalling time(previous test)
  TypeObject Thread Pool Cloning
    Clones objects much faster using threads (total_marshal_time / (num_cpus / 2))

Finished in 26.44 seconds (files took 0.12156 seconds to load)
13 examples, 0 failures

2014-12-31 05:10:30 -0500 | INFO: 
TypeObjectTests
  TypeObject assignment
    Loads prototype and base type data if it exists for all monster types, or just base type if it does not have a prototype
    Raises an exception if the monster type does not exist
    Gets a prototype name if it exists, and returns "none" if it does not
    Gives detailed exception information for MonsterNotFound
  TypeObject Marshal and Deep Clone Tests
    Loads all monster prototypes into memory, clones them, and verifies that their object_id's are different
    Loads all monster prototypes into memory, deep clones them(marshal/unmarshal), and verifies that their prototype object_id's are different
    Demonstrates that a shallow clone is not sufficient for prototyping by showing that the object id's for clones are different, but the underlying prototype id's are the same
    Demonstrates a better clone method (on the monster class) by showing that all object id's are different
    Raises an UnsupportedType exception if something other than a String or MonsterType is passed to Monster.new
    Create n number of orcs using threads and demonstrates the ruby threadwall
    Take longer than n / (n * 0.1) seconds to marshal and then unmarshal objects
    Completes n number of efficient clones in less time than the total marshalling time(previous test)
  TypeObject Thread Pool Cloning
    Clones objects much faster using threads (total_marshal_time / (num_cpus / 2))

Finished in 25.74 seconds (files took 0.1278 seconds to load)
13 examples, 0 failures

2014-12-31 05:22:31 -0500 | INFO: 
TypeObjectTests
  TypeObject assignment
    Loads prototype and base type data if it exists for all monster types, or just base type if it does not have a prototype
    Raises an exception if the monster type does not exist
    Gets a prototype name if it exists, and returns "none" if it does not
    Gives detailed exception information for MonsterNotFound
  TypeObject Marshal and Deep Clone Tests
    Loads all monster prototypes into memory, clones them, and verifies that their object_id's are different
    Loads all monster prototypes into memory, deep clones them(marshal/unmarshal), and verifies that their prototype object_id's are different
    Demonstrates that a shallow clone is not sufficient for prototyping by showing that the object id's for clones are different, but the underlying prototype id's are the same
    Demonstrates a better clone method (on the monster class) by showing that all object id's are different
    Raises an UnsupportedType exception if something other than a String or MonsterType is passed to Monster.new
    Create n number of orcs using threads and demonstrates the ruby threadwall
    Take longer than n / (n * 0.1) seconds to marshal and then unmarshal objects
    Completes n number of efficient clones in less time than the total marshalling time(previous test)
  TypeObject Thread Pool Cloning
    Clones objects much faster using threads (total_marshal_time / (num_cpus / 2))

Finished in 25.82 seconds (files took 0.12341 seconds to load)
13 examples, 0 failures

2015-01-02 09:16:29 -0500 | INFO: 
TypeObjectTests
  TypeObject assignment
    Loads prototype and base type data if it exists for all monster types, or just base type if it does not have a prototype
    Raises an exception if the monster type does not exist
    Gets a prototype name if it exists, and returns "none" if it does not
    Gives detailed exception information for MonsterNotFound
  TypeObject Marshal and Deep Clone Tests
    Loads all monster prototypes into memory, clones them, and verifies that their object_id's are different
    Loads all monster prototypes into memory, deep clones them(marshal/unmarshal), and verifies that their prototype object_id's are different
    Demonstrates that a shallow clone is not sufficient for prototyping by showing that the object id's for clones are different, but the underlying prototype id's are the same
    Demonstrates a better clone method (on the monster class) by showing that all object id's are different
    Raises an UnsupportedType exception if something other than a String or MonsterType is passed to Monster.new
    Create n number of orcs using threads and demonstrates the ruby threadwall
    Take longer than n / (n * 0.1) seconds to marshal and then unmarshal objects
    Completes n number of efficient clones in less time than the total marshalling time(previous test)
  TypeObject Thread Pool Cloning
    Clones objects much faster using threads (total_marshal_time / (num_cpus / 2))

Finished in 25.45 seconds (files took 0.12165 seconds to load)
13 examples, 0 failures

