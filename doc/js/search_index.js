var search_data = {"index":{"searchIndex":["object","patterns","admin","command","commandlist","copyfile","createfile","deletefile","gamemanager","logger","observer","player","singleton","subject","user","vector2d","string","add_command()","add_commands()","add_observer()","change_password()","colorize()","description()","error()","execute()","execute()","execute()","execute()","execute()","execute_next()","get_player_position()","get_world()","get_world_size()","green()","info()","init_world()","last_description()","last_status()","light_colorize()","log_world()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next_description()","next_status()","notify()","notify()","on_notify()","print_world()","red()","remove_observer()","status()","undo()","undo()","undo()","undo()","undo()","undo_last()","gemfile","gemfile.lock","license","patterns.gemspec","readme","rakefile","game_log.log"],"longSearchIndex":["object","patterns","patterns::admin","patterns::command","patterns::commandlist","patterns::copyfile","patterns::createfile","patterns::deletefile","patterns::gamemanager","patterns::logger","patterns::observer","patterns::player","patterns::singleton","patterns::subject","patterns::user","patterns::vector2d","string","patterns::commandlist#add_command()","patterns::commandlist#add_commands()","patterns::subject#add_observer()","patterns::user#change_password()","string#colorize()","patterns::commandlist#description()","patterns::logger#error()","patterns::command#execute()","patterns::commandlist#execute()","patterns::copyfile#execute()","patterns::createfile#execute()","patterns::deletefile#execute()","patterns::commandlist#execute_next()","patterns::gamemanager#get_player_position()","patterns::gamemanager#get_world()","patterns::gamemanager#get_world_size()","string#green()","patterns::logger#info()","patterns::gamemanager#init_world()","patterns::commandlist#last_description()","patterns::commandlist#last_status()","string#light_colorize()","patterns::gamemanager#log_world()","patterns::admin::new()","patterns::command::new()","patterns::commandlist::new()","patterns::copyfile::new()","patterns::createfile::new()","patterns::deletefile::new()","patterns::logger::new()","patterns::observer::new()","patterns::player::new()","patterns::subject::new()","patterns::user::new()","patterns::vector2d::new()","patterns::commandlist#next_description()","patterns::commandlist#next_status()","patterns::subject#notify()","patterns::user#notify()","patterns::observer#on_notify()","patterns::gamemanager#print_world()","string#red()","patterns::subject#remove_observer()","patterns::commandlist#status()","patterns::command#undo()","patterns::commandlist#undo()","patterns::copyfile#undo()","patterns::createfile#undo()","patterns::deletefile#undo()","patterns::commandlist#undo_last()","","","","","","",""],"info":[["Object","","Object.html","",""],["Patterns","","Patterns.html","","<p>Only here for documentation purposes\n"],["Patterns::Admin","","Patterns/Admin.html","","<p>Admin -&gt; Observer\n<p>An example class to show how the observer pattern can be practically\napplied\n"],["Patterns::Command","","Patterns/Command.html","","<p>Command -&gt; Object\n<p>Base Class that acts as a receiver and allows execution for a command while\nalso …\n"],["Patterns::CommandList","","Patterns/CommandList.html","","<p>CommandList -&gt; Patterns::Command\n<p>Class that stores a list of commands and provides a way to add and …\n"],["Patterns::CopyFile","","Patterns/CopyFile.html","","<p>CopyFile -&gt; Command\n<p>Class that implements a command to Copy a file from one location to\nanother, and …\n"],["Patterns::CreateFile","","Patterns/CreateFile.html","","<p>CreateFile -&gt; Command\n<p>Creates a file and writes data to it, and provides a command for undoing\nthat …\n"],["Patterns::DeleteFile","","Patterns/DeleteFile.html","","<p>DeleteFile -&gt; Command\n<p>Deletes a file, and provides the ability to undo that operation\n"],["Patterns::GameManager","","Patterns/GameManager.html","","<p>GameManager -&gt; Object\n<p>A different type of singleton that acts as a global constant object.\nMethods …\n"],["Patterns::Logger","","Patterns/Logger.html","","<p>Logger -&gt; Object\n<p>The standard singleton pattern example - a logger to handle writing to a\nlog file. …\n"],["Patterns::Observer","","Patterns/Observer.html","","<p>Observer -&gt; Object\n<p>An Observer class that receives notifications about events from subjects it\nis observing. …\n"],["Patterns::Player","","Patterns/Player.html","","<p>Player -&gt; Object\n<p>A quick data representation of a player&#39;s position\n"],["Patterns::Singleton","","Patterns/Singleton.html","","<p>Singleton\n<p>Implementations:n\n<p>GameManager -&gt; Objectn Logger -&gt; Object with Singleton Module\n"],["Patterns::Subject","","Patterns/Subject.html","","<p>Subject -&gt; Object\n<p>Contains a list of observers that are watching this subject\n"],["Patterns::User","","Patterns/User.html","","<p>User -&gt; Subject\n<p>An example class to show how the Subject functions in the Observer pattern\n"],["Patterns::Vector2D","","Patterns/Vector2D.html","","<p>Vector2D -&gt; Object\n<p>A quick data representation of a location in 2D space\n"],["String","","String.html","","<p>Extends the String class\n"],["add_command","Patterns::CommandList","Patterns/CommandList.html#method-i-add_command","(cmd)","<p>public: Adds a command to the list\n<p><code>cmd</code> - The command to be added to the list\n\n<p>Examples\n"],["add_commands","Patterns::CommandList","Patterns/CommandList.html#method-i-add_commands","(cmds)","<p>public: Adds a list of commands to the list\n<p><code>cmds</code> - The list of commands to add to the command list\n\n<p>Examples …\n"],["add_observer","Patterns::Subject","Patterns/Subject.html#method-i-add_observer","(observer)","<p>Adds an observer to the list of observers\n<p><code>observer</code> - The observer to add to the list\n\n<p>Examples\n"],["change_password","Patterns::User","Patterns/User.html#method-i-change_password","(new_password)","<p>Changes a user password and notifies all of its observers\n<p><code>new_password</code> - The new password to change the …\n\n"],["colorize","String","String.html#method-i-colorize","(color_code)","<p>Wraps the ansi standard color code around a string\n"],["description","Patterns::CommandList","Patterns/CommandList.html#method-i-description","()","<p>public: Returns the string of the descriptions of all commands in the list\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">command_list</span>.<span class=\"ruby-identifier\">description</span>\n</pre>\n"],["error","Patterns::Logger","Patterns/Logger.html#method-i-error","(message)","<p>Sets the format of our log message to error and writes data to the log file\n<p><code>message</code> - The message to log …\n\n"],["execute","Patterns::Command","Patterns/Command.html#method-i-execute","(function)","<p>Called by the child class&#39; execute function\n<p><code>function</code> - The actual command that will be executed, passed …\n\n"],["execute","Patterns::CommandList","Patterns/CommandList.html#method-i-execute","()","<p>not practical unless you want to run every command in the list; for\ndemonstration only\n"],["execute","Patterns::CopyFile","Patterns/CopyFile.html#method-i-execute","()","<p>Copies a file from a source location to a target destination\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">copy_file_cmd</span>.<span class=\"ruby-identifier\">execute</span>\n</pre>\n"],["execute","Patterns::CreateFile","Patterns/CreateFile.html#method-i-execute","()","<p>Creates a file and writes data to it; will overwrite data if the file\nalready exists. This function should …\n"],["execute","Patterns::DeleteFile","Patterns/DeleteFile.html#method-i-execute","()","<p>Deletes a file if it exists\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">delete_file_cmd</span>.<span class=\"ruby-identifier\">execute</span>\n</pre>\n"],["execute_next","Patterns::CommandList","Patterns/CommandList.html#method-i-execute_next","()","<p>public: Executes the next command in the list\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">command</span> = <span class=\"ruby-constant\">Command</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;A new base command&#39;</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["get_player_position","Patterns::GameManager","Patterns/GameManager.html#method-i-get_player_position","()","<p>Returns the player&#39;s position\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">GameManager</span>.<span class=\"ruby-identifier\">get_player_position</span>\n</pre>\n"],["get_world","Patterns::GameManager","Patterns/GameManager.html#method-i-get_world","()","<p>Returns the current world state\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">GameManager</span>.<span class=\"ruby-identifier\">get_world</span>\n</pre>\n"],["get_world_size","Patterns::GameManager","Patterns/GameManager.html#method-i-get_world_size","()","<p>Returns the world size as a Vector2D Object\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">GameManager</span>.<span class=\"ruby-identifier\">get_world_size</span>\n</pre>\n"],["green","String","String.html#method-i-green","()","<p>Prints green text\n"],["info","Patterns::Logger","Patterns/Logger.html#method-i-info","(message)","<p>Sets the format of our log message to info and writes data to the log file\n<p><code>message</code> - The message to log …\n\n"],["init_world","Patterns::GameManager","Patterns/GameManager.html#method-i-init_world","()","<p>Initializes the game world, builds a game map, and sets the player&#39;s\nlocation\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">GameManager</span>.<span class=\"ruby-identifier\">init_world</span>\n</pre>\n"],["last_description","Patterns::CommandList","Patterns/CommandList.html#method-i-last_description","()","<p>public: Returns the description of the last command executed\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">command</span> = <span class=\"ruby-constant\">Command</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;A new base ...\n</span></pre>\n"],["last_status","Patterns::CommandList","Patterns/CommandList.html#method-i-last_status","()","<p>public: Returns the status of the last command executed\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">command</span> = <span class=\"ruby-constant\">Command</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;A new base command&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["light_colorize","String","String.html#method-i-light_colorize","(color_code)","<p>Wraps the ansi standard color code 1 around a string\n"],["log_world","Patterns::GameManager","Patterns/GameManager.html#method-i-log_world","()","<p>Logs the current world state\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">GameManager</span>.<span class=\"ruby-identifier\">log_world</span>\n</pre>\n"],["new","Patterns::Admin","Patterns/Admin.html#method-c-new","(name, email)","<p>Initializes the Admin class and the Observer superclass\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">admin</span> = <span class=\"ruby-constant\">Admin</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;Chris&#39;</span>, <span class=\"ruby-string\">&#39;ccooper@sessionm.com&#39;</span>)\n</pre>\n"],["new","Patterns::Command","Patterns/Command.html#method-c-new","(description)","<p>Initializes the Command Class Designed to be called by a child class in its\ninitialize method\n<p><code>description</code> …\n\n"],["new","Patterns::CommandList","Patterns/CommandList.html#method-c-new","()","<p>public: Initializes the command list\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">command_list</span> = <span class=\"ruby-constant\">CommandList</span>.<span class=\"ruby-identifier\">new</span>\n</pre>\n"],["new","Patterns::CopyFile","Patterns/CopyFile.html#method-c-new","(source, target)","<p>Initializes the CopyFile Class\n<p><code>source</code> - The source path for the file to be copied\n<p><code>target</code> - The target destination …\n"],["new","Patterns::CreateFile","Patterns/CreateFile.html#method-c-new","(path, data)","<p>Initializes the CreateFile Class\n<p><code>path</code> - The file path to write the file\n<p><code>data</code> - The data to write to the …\n"],["new","Patterns::DeleteFile","Patterns/DeleteFile.html#method-c-new","(path)","<p>Initializes the DeleteFile Class\n<p><code>path</code> - The path of the file to delete\n\n<p>Examples\n"],["new","Patterns::Logger","Patterns/Logger.html#method-c-new","()","<p>Initializes the Logger, the Singleton include will ensure it is only\ninitialized once, and only when …\n"],["new","Patterns::Observer","Patterns/Observer.html#method-c-new","()","<p>Initializes the observer class\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">observer</span> = <span class=\"ruby-constant\">Observer</span>.<span class=\"ruby-identifier\">new</span>\n</pre>\n"],["new","Patterns::Player","Patterns/Player.html#method-c-new","(x, y)","<p>Initializes the Player object\n<p><code>x</code> - The player&#39;s x position\n<p><code>y</code> - The player&#39;s y position\n"],["new","Patterns::Subject","Patterns/Subject.html#method-c-new","()","<p>Initializes the subject class\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">subject</span> = <span class=\"ruby-constant\">Subject</span>.<span class=\"ruby-identifier\">new</span>\n</pre>\n"],["new","Patterns::User","Patterns/User.html#method-c-new","(user_name, email, password)","<p>Initializes the User class and the Subject superclass\n<p><code>user_name</code> - The user&#39;s username\n<p><code>email</code> - The user&#39;s …\n"],["new","Patterns::Vector2D","Patterns/Vector2D.html#method-c-new","(x, y)","<p>Initializes the Vector2D object\n<p><code>x</code> - The x position of the object\n<p><code>y</code> - The y position of the object\n"],["next_description","Patterns::CommandList","Patterns/CommandList.html#method-i-next_description","()","<p>public: Returns the description of the next command in the list\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">command</span> = <span class=\"ruby-constant\">Command</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;A new ...\n</span></pre>\n"],["next_status","Patterns::CommandList","Patterns/CommandList.html#method-i-next_status","()","<p>public: Returns the status of the next command in the list\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">command</span> = <span class=\"ruby-constant\">Command</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;A new base ...\n</span></pre>\n"],["notify","Patterns::Subject","Patterns/Subject.html#method-i-notify","(notification, event)","<p>Notifies the observer of some change\n<p><code>notification</code> - The notification to send to the observers\n<p><code>event</code> -  …\n"],["notify","Patterns::User","Patterns/User.html#method-i-notify","(notification, event)","<p>Notifies the superclass of an event, which in turn notifies all of its\nobservers\n<p><code>notification</code> - The notification …\n"],["on_notify","Patterns::Observer","Patterns/Observer.html#method-i-on_notify","(notification, event)","<p>Is called when this function is invoked by a subject\n<p>Note: in a real implementation, the event would likely …\n"],["print_world","Patterns::GameManager","Patterns/GameManager.html#method-i-print_world","()","<p>Prints the game world\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">GameManager</span>.<span class=\"ruby-identifier\">print_world</span>\n</pre>\n"],["red","String","String.html#method-i-red","()","<p>Prints red text\n"],["remove_observer","Patterns::Subject","Patterns/Subject.html#method-i-remove_observer","(observer)","<p>Removes an observer from the list of observers\n<p><code>observer</code> - The observer to remove from the list\n\n<p>Examples …\n"],["status","Patterns::CommandList","Patterns/CommandList.html#method-i-status","()","<p>public: Returns the string of the status of all commands in the list\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">command_list</span>.<span class=\"ruby-identifier\">status</span>\n</pre>\n"],["undo","Patterns::Command","Patterns/Command.html#method-i-undo","(function)","<p>Called by the child class&#39; undo function.\n<p><code>function</code> - The command that will perform the undo operation …\n\n"],["undo","Patterns::CommandList","Patterns/CommandList.html#method-i-undo","()","<p>also only practical if you want to reverse every command in the list\n"],["undo","Patterns::CopyFile","Patterns/CopyFile.html#method-i-undo","()","<p>Undoes a copy operation\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">copy_file_cmd</span>.<span class=\"ruby-identifier\">undo</span>\n</pre>\n"],["undo","Patterns::CreateFile","Patterns/CreateFile.html#method-i-undo","()","<p>Undoes file creation; to be more useful, this should probably only remove\ndata if it was appended, and …\n"],["undo","Patterns::DeleteFile","Patterns/DeleteFile.html#method-i-undo","()","<p>Replaces a file that was deleted\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">delete_file_cmd</span>.<span class=\"ruby-identifier\">undo</span>\n</pre>\n"],["undo_last","Patterns::CommandList","Patterns/CommandList.html#method-i-undo_last","()","<p>public: Undoes the last command executed\n<p>Examples\n\n<pre class=\"ruby\">=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">command</span> = <span class=\"ruby-constant\">Command</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;A new base command&#39;</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">command_list</span>.<span class=\"ruby-identifier\">add_command</span>(<span class=\"ruby-identifier\">command</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Gemfile","","Gemfile.html","","<p>source &#39;rubygems.org&#39;\n<p># Specify your gem&#39;s dependencies in Patterns.gemspec gemspec\n<p>gem &#39;rspec&#39; …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  Patterns (0.0.3)</pre>\n<p>GEM\n"],["LICENSE","","LICENSE_txt.html","","<p>Copyright © 2014 Chris Cooper\n<p>MIT License\n<p>Permission is hereby granted, free of charge, to any person …\n"],["Patterns.gemspec","","Patterns_gemspec.html","","<p>lib = File.expand_path(&#39;../lib&#39;, __FILE__) $LOAD_PATH.unshift(lib)\nunless $LOAD_PATH.include?(lib) …\n"],["README","","README_md.html","","<p>Patterns\n<p>This project began because I wanted to help some of the people at work\nlearn Ruby, and I decided …\n"],["Rakefile","","Rakefile.html","","<p>require “bundler/gem_tasks”\n<p>gem &#39;rdoc&#39; require &#39;rdoc/task&#39; RDoc::Task.new do …\n"],["game_log.log","","app/models/singleton/log/game_log_log.html","","<p>2014-12-20 17:25:29 -0500 | INFO: Player position x: 20, Player position y:\n1 2014-12-20 17:25:29 -0500 …\n"]]}}